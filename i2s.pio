; An I2S full duplex slave with an associated output dual rate I2S port.
;
; Uses a set of 7 pins
;
; DO DI BCLK LRCLK    DO BCLKx2 LRCLKx2
;


.program i2s_duplex
; Duplex port (input and output) in slave mode.
; Requires external BCK and LRCK.  Clock at the internal system clock.
; 
; Input pin order: DIN, BCK, LRCK
; JMP pin to LRCK.
;

start_l:
  wait 1 pin 1                  ; DIN should be sampled on rising transition of BCK
  in pins, 1                    ; first "bit" of new frame is actually LSB of last frame, per I2S 
  pull noblock                  ;
  push noblock                  ;
  wait 0 pin 1                  ; ignore first BCK transition after edge
public_entry_point:
  wait 0 pin 2                  ; wait for L frame to come around before we start
  out pins 1                    ; update DOUT on falling BCK edge
loop_l:
  wait 1 pin 1                  ; DIN should be sampled on rising transition of BCK
  in pins, 1                    ; read DIN
  wait 0 pin 1                  ; DOUT should be updated on falling transition of BCK
  out pins 1                    ; update DOUT
  jmp pin start_r               ; if LRCK has gone high, we're "done" with this word (1 bit left to read)
  jmp loop_l                    ;
start_r:
  wait 1 pin 1                  ; wait for the last bit of the previous frame
  in pins, 1                    ; first "bit" of new frame is actually LSB of last frame, per I2S
  pull noblock                  ; pull next output word from FIFO
  push noblock                  ; push the completed word to the FIFO
  wait 0 pin 1                  ; wait for next clock cycle
  out pins 1                    ; update DOUT on falling edge
loop_r:
  wait 1 pin 1                  ;
  in pins 1                     ;
  wait 0 pin 1                  ;
  out pins 1                    ; update DOUT
  jmp pin loop_r                ; if LRCK is still high, we're still sampling this word
                                ; implicit jmp to start_l: otherwise, start the loop over

.program i2s_double
; I2S audio output master running at 2x the i2s_duplex block (using same input framing).
;
; Input pin order: BCK, LRCK
; JMP pin to LRCK
; Output order:    BCKx2, LRCKx2


.side_set 2 


public entry_point:
.wrap_target                        ;        /--- LRCLK
                        ;        |/-- BCLK
                        ;        ||
    set x, 31             side 0b10
    set y, 30       [6]   side 0b10
    wait 0 pin 1          side 0b11     ; Sync to falling LRCLK (assume also falling BCLK)
frameL0: 
    nop             [7]   side 0b00
    jmp x-- frameL0 [7]   side 0b01
frameR0: 
    nop             [7]   side 0b10
    jmp y-- frameR0 [7]   side 0b11
    set x, 31             side 0b10
    set y, 30       [6]   side 0b10
    wait 1 pin 1          side 0b11     ; Sync to rising LR
frameL1: 
    nop             [7]   side 0b00
    jmp x-- frameL1 [7]   side 0b01
frameR1: 
    nop             [7]   side 0b10
    jmp y-- frameR1 [7]   side 0b11
.wrap




% c-sdk {

static inline void i2s_double_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t pin_base) 
{
    pio_gpio_init(pio, pin_base + 2);        // BCLK in at half rate
    pio_gpio_init(pio, pin_base + 3);        // LRCLK in at half rate
    pio_gpio_init(pio, pin_base + 4);        // DO
    pio_gpio_init(pio, pin_base + 5);        // BCLK
    pio_gpio_init(pio, pin_base + 6);        // LRCLK

    pio_sm_config sm_config = i2s_double_program_get_default_config(offset);
    sm_config_set_out_pins     (&sm_config, pin_base + 4, 1);
    sm_config_set_in_pins      (&sm_config, pin_base + 2);
    sm_config_set_sideset_pins (&sm_config, pin_base + 5);
    sm_config_set_jmp_pin      (&sm_config,  pin_base + 3);
    sm_config_set_out_shift    (&sm_config,  false, false, 32);
    pio_sm_init(pio, sm, offset, &sm_config);

    uint32_t pin_mask = (0b1110000 << pin_base);            // Three output pins
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask); 
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);

    pin_mask = (0b0001100 << pin_base);                  // The clock from normal rate
    pio_sm_set_pindirs_with_mask(pio, sm, 0, pin_mask);

}

static inline void i2s_duplex_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t pin_base) 
{
    pio_gpio_init(pio, pin_base + 0);       // DO
    pio_gpio_init(pio, pin_base + 1);       // DI
    pio_gpio_init(pio, pin_base + 2);       // BCLK
    pio_gpio_init(pio, pin_base + 3);       // LRCLK

    pio_sm_config sm_config = i2s_duplex_program_get_default_config(offset);
    sm_config_set_out_pins (&sm_config, pin_base, 1);
    sm_config_set_in_pins  (&sm_config, pin_base + 1);
    sm_config_set_jmp_pin  (&sm_config, pin_base + 3);
    sm_config_set_out_shift(&sm_config, false, false, 0);
    sm_config_set_in_shift (&sm_config, false, false, 0);
    pio_sm_init(pio, sm, offset, &sm_config);

    uint32_t pin_mask = (0b0000001 << pin_base);            // Single output pin
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask); 
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);

    pin_mask = (0b00001110 << pin_base);                    // Three input pins
    pio_sm_set_pindirs_with_mask(pio, sm, 0, pin_mask);
}

%}